[ { "title": "How to set preview window theme for markdown preview?", "url": "/posts/markdown-preview-enhanced-preivew-theme/", "categories": "Development, Coding, VisualStudioCode", "tags": "visualstudiocode, markdown, customize, developerlife", "date": "2022-11-30 05:15:00 +0100", "snippet": "I’m writing markdown basically everyday. I love Visual Studio Code as an editor and i’m using Markdown Preview Enhanced as my preview tool.Now out of the box the preview window is white, and I prefer a darker theme and have set my VS Code to have a darker theme, more precisely One dark pro.What is most annoying is the white background on the Preveiw window, it hurts my eyes having a darker theme and a white bright preview window.So lets fix this! Open your settings.json file, that holds your settings for Visual Studio, if you dont know how to do that; search for Open User Settings (JSON) in your command pallet. To open your command pallet on MAC press Command+Shift+P and Windows Ctrl+Shift+PYou will open a JSON file and here you can add a theme for Markdown Preview Enhanced Preview theme; “markdown-preview-enhanced.previewTheme”: “one-dark.css”,You can set the theme’s css to any of the installed theme’s you have. For me some of the options are as image belowAnd by setting this I now have a dark preview window for my markdown! Got damn that is neat!" }, { "title": "xUnit, complex types as parameters? Memberdata!", "url": "/posts/xunit-certain-things-should-be-used-more/", "categories": "Development, Coding, Testing", "tags": "xunit, .net, unittest, testing", "date": "2022-11-21 02:51:00 +0100", "snippet": "TLDR;Go to the code example: code.This is a feature in Xunit that I think people arent using enough. There are many times that you can get away with having a few parameters into a test with the attribute InlineData, and it will look something like this:[Theory][InlineData(\"\")][InlineData(\" \")][InlineData(null)]public void Given_Something_Should_Throw_Exception(string name){ var act = () =&gt; { //Do seomthing with name }; act.Should().Throw&lt;ArgumentException&gt;(\"*name*\");}A parameterized test is common as above, but when it comes to the fact that you would like to have a collection of some sort as a parameter, I dont see people use MemberData attribute together with TheoryData.How it works is quite simple; foreach item in your TheoryData is one test case. For example, let’s say you want to test a method that takes in a string as a parameter to not be null, empty or only spaces.You could create a source of data with 3 items, and reference that as your MemberData for your Theory like below:Example codepublic class TestData{ public static TheoryData&lt;string&gt; StringNullEmptyAndWhiteSpace =&gt; new TheoryData&lt;string&gt;() { { \"\" }, { null }, { \" \" }, };}public class FubarTests{ [Theory] [MemberData(nameof(TestData.StringNullEmptyAndWhiteSpace), MemberType = typeof(TestData))] public void Given_Something_Should_Throw_Exception(string name) { var act = () =&gt; { //Do seomthing with name }; act.Should().Throw&lt;ArgumentException&gt;(\"*name*\"); }}The assertion above is written with FluentAssertions, one of my favourite libraries for assertions!Small note here for the attribute, the propert MemberType is only required if you have “TestData” outside the class you want to use it in. If you would create a property in the same class as your test, you dont need to set this property.More Complex parameters?As TheoryData is generic you can basically add whatever model you want to have, so you could also have a parameter that is a list, for ex:public static TheoryData&lt;IEnumerable&lt;string&gt;&gt; ListAsParameter =&gt; new TheoryData&lt;IEnumerable&lt;string&gt;&gt;() { new [] { \"\" , null, \" \" ,} };This way you can with ease have more complex parameters to your Theory lists for example, that InlineData dosent support!Frankly I dont know, why I dont see this small feature used more often, also, I see people use this with objects instead of actually classes." }, { "title": "My favourite key shortcuts I cant live withouth", "url": "/posts/my-most-common-shortcuts/", "categories": "Development", "tags": "ide, rider, visualstudio, productivity, developerlife", "date": "2022-11-08 02:01:00 +0100", "snippet": "My favourite key shortcuts I cant live withouthtldr; Resharper.Resharper_LocateInSolutionOrAssemblyExplorer Resharper.Resharper_GoToType Resharper.Resharper_GoToFile Resharper.Resharper_Generate (Context: File) Resharper.Resharper_Generate (Context: Solution Explorer) Window.NextDocumentWindowNav File.Close/Close Active Tab Edit.ToggleOutliningExpension/ToggleFolding Edit.SurroundWith Edit.FormatDocument Edit.CommentSelection Edit.UncommentSelection Debug.ToggleBreakBreakPoint When I quit my previous job, I got a reminder just before I ended, how important it is to configure my IDE to my behaviour. As my last weeks flew by I got to learn that I wont work on the same OS anymore and therefore also switch IDE, this did made me feel exited, happy and frankly a bit scared also, as I have for the last 10 years tried to configure my IDE for my needs and how I behave, I have replicated the same key shortcuts from google chrome to match how I navigate inside Visual Studio, when I close a tab in google chrome I use CTRL + W so by nature I want the same in Visual Studio code.With the knowledge that I now need to move from Visual Studio (with Resharper) to Project Rider, I set out 2 weeks where I listed the most important key shortcuts that im using and remap them to my new IDE. When I say most important, the one I use on a daily basis.The list I came up with was as follows: (in no specific order) Resharper.Resharper_LocateInSolutionOrAssemblyExplorer - Locating curent file in solution tree Resharper.Resharper_GoToType - Search by type Resharper.Resharper_GoToFile - Search by filename Resharper.Resharper_Generate (Context: File) - Generate code snippets, ctor etc inside file Resharper.Resharper_Generate (Context: Solution Explorer/File tree) - Opens context menu to add new item, file, folder etc. Window.NextDocumentWindowNav - Navigate to next tab open in the IDE File.Close - Close current active tab Edit.ToggleOutliningExpension - Toggle folding scope Edit.SurroundWith - Open up menu with selelection to surround the selected code with ex, try catch, while loop, if etc. Edit.FormatDocument - Format document with intendation Edit.CommentSelection - Comment selected section Edit.UncommentSelection - Comment selected section Debug.ToggleBreakBreakPoint - Toggle breakpoint on current lineKey mapingsThis is how I do the mapping: Command name VS Rider Resharper.Resharper_LocateInSolutionOrAssemblyExplorer (Shift+Alt+L) (Option+Shift+L) Resharper.Resharper_GoToType (Ctrl+T) (Ctrl+Shift+N) Resharper.Resharper_GoToFile (Ctrl+Shift+T) (Ctrl+Shift+N) Resharper.Resharper_Generate (Context: File) (Alt+Ins) (Command+F10) Resharper.Resharper_Generate (Context: Solution Explorer) (Alt+Ins) (Shift+F10) Window.NextDocumentWindowNav (Ctrl+Tab) (Ctrl+Tab) File.Close/Close Active Tab  (Ctrl+W) (Command+W) Edit.ToggleOutliningExpension/ToggleFolding (Alt+1) (Command+1) Edit.SurroundWith (Ctrl+K+S) (Command+K+S) Edit.FormatDocument (Ctrl+K+D) (Ctrl+Option+L) Edit.CommentSelection (Ctrl+K+C) (Command+K+C) Edit.UncommentSelection (Ctrl+K+U) (Command+K+C) Debug.ToggleBreakBreakPoint F9 F9 Disclosure, or somethingI also came to the insight that this is something that junior developers dosent get thought, as I havent had the pleasure to work as a mentor for someone 100% almost everyone I came by the last year who’s fresh out of school havent learned how to configure their IDE, to work with the keyboard for debugging, just for the reasons to become more producitve in their day to day work.What happened? 10 years ago I’m sure I have read blog posts about productivity and how important it is to get to learn your IDE, is that not a thing today? People just want to press run and click with the mouse forever?Postscript noteThe list is obvious missing a few shortcuts as when im writing this comes to think off the following on top of my head (I dont have the actual name for the IDE’s at this moment of time) I dont know how I missed these, I guess they are to essential that they are always there.(Windows Visual Studio) Jump next line (when debugging) - F11 Jump into (when debugging) - F10 Run - F5 Remove all breakpoint - CTRL + SHIFT + F9 Stop debugging - Shift + F5 Run test - Ctrl + R + T View Action list - Alt + EnterHoneslty not sure how I missed those, and also when it comes to productivity shortcuts, I think there has to be a second blog post about just Visual Studio code, as that is an amazing tool when you get to learn it properly!" }, { "title": "Adding Utterances as comment feature for jekyll", "url": "/posts/adding-utterence/", "categories": "Jekyll, Tutorial", "tags": "jekyll, utterances", "date": "2022-05-19 07:01:00 +0200", "snippet": "Adding Utterances as comment feature for jekylltldr; Install Utterances from Github Marketplace Configure your script tag Paste your script tag in _layouts/post.html This blog is hosted on github pages powered by Jekyll, my theme that I have choosed is Chirpy.But Jekyll dosent come with comment features for your pages or blog posts, that’s why we are gonna test Utterance. Utterances is an lightweight open source no ad plugin for Github that uses the issues feature for blog comments, pages and more.In short Utterances will match the current page based on url, title or pathname, and will if non issue exist, create on for you.Step 1, install utterancesSo head over to Github and install the app from marketplace, should look something like this:verry funny “see plan” button that leads you toClick install for free and continue with the setup, the first option is to choose if you want to install the app for All or Only one selected repository, for this tutorial; Im choosing one repository. Enforce the installment by entering your password once again. Step 2, Configure your script tagAfter this step you will get to redirected to utterances website. And more specific the install section, the steps here are detailed and explained, so the configuration steps,1. Enter your github repo name2. Select how you want utterances to identify your issue for your page/post3. Add an label that will be automatically added to your issue when utterances is creating a new issue4. Select a theme. These steps will than give you a small script section that you want to hold on to:&lt;script src=\"https://utteranc.es/client.js\" repo=\"justsomerandomcoding/justsomerandomcoding.github.io\" issue-term=\"url\" theme=\"github-dark\" crossorigin=\"anonymous\" async&gt;&lt;/script&gt;Step 3, Add your script tag to your pagesYou should with this script tag add it to the pages where you want to have comments, now I only want to have comments on my blog posts, so I located my _layout/post.html template that is the template for blog posts and pastet the script in the bottom of the file. Now I have comments on the blog" }, { "title": "Installing Jekyll on windows", "url": "/posts/installing-jekyll-on-windows/", "categories": "Jekyll, Tutorial", "tags": "getting started, jekyll", "date": "2022-05-08 20:37:00 +0200", "snippet": "How can not the first blog post on a tech site be, how I did itThis blog is beeing hosted on Github pages so with that said, it’s quite obvious that I do have a github account and git installed. Github pages support Jekyll that transforms your Markdown files to a static website (in short). There is no need for databases, updates, or stuff like that, you have your files in your repository, Jekyll transforms your file to a static website, this means a blogpost is simply a markdown file in the end. So here is how I did it.InstallationRequirementsYou need Git, Chocolatey, Ruby, GCC, G++ and MakeFrom Jekylls website I downloaded and installed Ruby and RubyGemsAfter that with Chocolatey I installed the rest what I needed choco install make choco install mingw You can actually install ruby togehter with their devkit through chocolatey also, just run:choco install ruby andchoco install ruby.devkitJekyllWhen you have ruby installed you can install Jekyllgem install jekyll bundlerVerify you installationCheck your version on everything that you have installed to double check that all is good ruby -v gem -v gcc –version g++ –version make –version jekyll -vCreating my siteI didnt wanted to create my own theme, I was looking for something simple and did found Chirpy which is the theme i went with. Chirpy is a minimal, responsive and powerful Jekyll theme all open source.So I created a new repository from their started repository Jekyll started, to have a personal website hosted on gitpages your repository have to correspond with your username, so logically I named my new repository justsomerandomcode.github.io.With the code locally it’s just to install and bundle + get a local web server up and running with your site.bundle installRun a local serverbundle exec jekyll serve --livereloadChirpy has extended documentation on what you need to change, i did a few changes for authors, removed some posts and edit the _config.yml file and I was ready to go!Deploying the code to GithubThe starter repo that i’m using, seems to have everything I need, so to deploy the code and run the website, it’s just to follow a few more changes, go to my .github/workflows/pages-deploy.yml.hook and change the branch to trigger on main not master.Go to my Github repo -&gt; settings -&gt; pages, select my source a the new branch that is created automatically gh-pages and folder to ´/root´, done and done, push my code and the site is up and running.What’s next?This blog is runnig on markdown files and Chirpy theme as mentioned above, for the time beeing (when im writing this) I dont have any data on traffic for this site. So the next step will be to follow the tutorial to setup Google Analyctics and start to monitor how many visitors this blog actually gets.I’v also read that I can add comments on this site by using Githubs issues themselfs via a 3rd party plugin. Utterences seems to be a good option, open source, free and under the MIT License." } ]
